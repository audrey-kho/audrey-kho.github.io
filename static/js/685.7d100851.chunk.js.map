{"version":3,"file":"static/js/685.7d100851.chunk.js","mappings":"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","sources":["../node_modules/@firebase/database/src/core/version.ts","../node_modules/@firebase/database/src/core/storage/DOMStorageWrapper.ts","../node_modules/@firebase/database/src/core/storage/MemoryStorage.ts","../node_modules/@firebase/database/src/core/storage/storage.ts","../node_modules/@firebase/database/src/core/util/util.ts","../node_modules/@firebase/database/src/core/AppCheckTokenProvider.ts","../node_modules/@firebase/database/src/core/AuthTokenProvider.ts","../node_modules/@firebase/database/src/realtime/Constants.ts","../node_modules/@firebase/database/src/core/RepoInfo.ts","../node_modules/@firebase/database/src/core/stats/StatsCollection.ts","../node_modules/@firebase/database/src/core/stats/StatsManager.ts","../node_modules/@firebase/database/src/realtime/polling/PacketReceiver.ts","../node_modules/@firebase/database/src/realtime/BrowserPollConnection.ts","../node_modules/@firebase/database/src/realtime/WebSocketConnection.ts","../node_modules/@firebase/database/src/realtime/TransportManager.ts","../node_modules/@firebase/database/src/realtime/Connection.ts","../node_modules/@firebase/database/src/core/ServerActions.ts","../node_modules/@firebase/database/src/core/util/EventEmitter.ts","../node_modules/@firebase/database/src/core/util/OnlineMonitor.ts","../node_modules/@firebase/database/src/core/util/Path.ts","../node_modules/@firebase/database/src/core/util/VisibilityMonitor.ts","../node_modules/@firebase/database/src/core/PersistentConnection.ts","../node_modules/@firebase/database/src/core/snap/Node.ts","../node_modules/@firebase/database/src/core/snap/indexes/KeyIndex.ts","../node_modules/@firebase/database/src/core/snap/indexes/Index.ts","../node_modules/@firebase/database/src/core/util/SortedMap.ts","../node_modules/@firebase/database/src/core/snap/snap.ts","../node_modules/@firebase/database/src/core/snap/comparators.ts","../node_modules/@firebase/database/src/core/snap/LeafNode.ts","../node_modules/@firebase/database/src/core/snap/indexes/PriorityIndex.ts","../node_modules/@firebase/database/src/core/snap/IndexMap.ts","../node_modules/@firebase/database/src/core/snap/ChildrenNode.ts","../node_modules/@firebase/database/src/core/snap/childSet.ts","../node_modules/@firebase/database/src/core/snap/nodeFromJSON.ts","../node_modules/@firebase/database/src/core/snap/indexes/PathIndex.ts","../node_modules/@firebase/database/src/core/snap/indexes/ValueIndex.ts","../node_modules/@firebase/database/src/core/view/Change.ts","../node_modules/@firebase/database/src/core/view/filter/IndexedFilter.ts","../node_modules/@firebase/database/src/core/view/QueryParams.ts","../node_modules/@firebase/database/src/core/ReadonlyRestClient.ts","../node_modules/@firebase/database/src/core/SnapshotHolder.ts","../node_modules/@firebase/database/src/core/SparseSnapshotTree.ts","../node_modules/@firebase/database/src/core/stats/StatsListener.ts","../node_modules/@firebase/database/src/core/operation/Operation.ts","../node_modules/@firebase/database/src/core/stats/StatsReporter.ts","../node_modules/@firebase/database/src/core/operation/AckUserWrite.ts","../node_modules/@firebase/database/src/core/util/ImmutableTree.ts","../node_modules/@firebase/database/src/core/operation/Overwrite.ts","../node_modules/@firebase/database/src/core/operation/Merge.ts","../node_modules/@firebase/database/src/core/view/CacheNode.ts","../node_modules/@firebase/database/src/core/view/EventGenerator.ts","../node_modules/@firebase/database/src/core/view/ViewCache.ts","../node_modules/@firebase/database/src/core/CompoundWrite.ts","../node_modules/@firebase/database/src/core/WriteTree.ts","../node_modules/@firebase/database/src/core/view/ChildChangeAccumulator.ts","../node_modules/@firebase/database/src/core/view/CompleteChildSource.ts","../node_modules/@firebase/database/src/core/view/ViewProcessor.ts","../node_modules/@firebase/database/src/core/view/View.ts","../node_modules/@firebase/database/src/core/SyncPoint.ts","../node_modules/@firebase/database/src/core/SyncTree.ts","../node_modules/@firebase/database/src/core/util/ServerValues.ts","../node_modules/@firebase/database/src/core/util/Tree.ts","../node_modules/@firebase/database/src/core/util/validation.ts","../node_modules/@firebase/database/src/core/view/EventQueue.ts","../node_modules/@firebase/database/src/core/Repo.ts","../node_modules/@firebase/database/src/core/util/libs/parser.ts","../node_modules/@firebase/database/src/core/util/NextPushId.ts","../node_modules/@firebase/database/src/api/Reference_impl.ts","../node_modules/@firebase/database/src/api/Database.ts","../node_modules/@firebase/database/src/api/test_access.ts","../node_modules/@firebase/database/src/register.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n/**\n * SDK_VERSION should be set before any database instance is created\n * @internal\n */\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\nimport { QueryContext } from '../view/EventRegistration';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\n  if (\n    typeof timeout === 'number' &&\n    // @ts-ignore Is only defined in Deno environments.\n    typeof Deno !== 'undefined' &&\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno['unrefTimer']\n  ) {\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno.unrefTimer(timeout);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } else if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  constructor(\n    private appName_: string,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE =\n  /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n          this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n        onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange =\n            function () {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              const rstate = (newScript as any).readyState;\n              if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                newScript.onload = (newScript as any).onreadystatechange = null;\n                if (newScript.parentNode) {\n                  newScript.parentNode.removeChild(newScript);\n                }\n                loadCB();\n              }\n            };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APPLICATION_ID_PARAM,\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken,\n      applicationId\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string,\n    applicationId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n    if (applicationId) {\n      urlParams[APPLICATION_ID_PARAM] = applicationId;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      let options: { [k: string]: object };\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        options = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n      }\n      this.mySock = new WebSocketImpl(this.connURL, [], options);\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  // Keeps track of whether the TransportManager has already chosen a transport to use\n  static globalTransportInitialized_ = false;\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\n   * TransportManager has already set up transports_\n   */\n  static get IS_TRANSPORT_INITIALIZED() {\n    return this.globalTransportInitialized_;\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n      TransportManager.globalTransportInitialized_ = true;\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(\n          payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          }\n        );\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent of (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      `listen() called twice for same path/queryId.`\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = { key: node.key, value: node.value } as unknown as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as unknown as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key as unknown as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          namedNode.node as unknown as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\n\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes(): boolean {\n    return false;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_START_IS_INCLUSIVE = 'sin',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  INDEX_END_IS_INCLUSIVE = 'ein',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AFTER = 'startAfter',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  END_BEFORE = 'endBefore',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false; // can only be true if startSet_ is true\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false; // can only be true if endSet_ is true\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.startAfterSet_ = this.startAfterSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.endBeforeSet_ = this.endBeforeSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    const startParam = queryParams.startAfterSet_\n      ? REST_QUERY_CONSTANTS.START_AFTER\n      : REST_QUERY_CONSTANTS.START_AT;\n    qs[startParam] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[startParam] += ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    const endParam = queryParams.endBeforeSet_\n      ? REST_QUERY_CONSTANTS.END_BEFORE\n      : REST_QUERY_CONSTANTS.END_AT;\n    qs[endParam] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[endParam] += ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE] =\n      !queryParams.startAfterSet_;\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE] =\n      !queryParams.endBeforeSet_;\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue =\n            child.findRootMostMatchingPathAndValue(\n              pathPopFront(relativePath),\n              predicate\n            );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertionError } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\n\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { Event } from './Event';\nimport { EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: QueryContext) {\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport {\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate =\n            writeTreeRefCalcEventCacheAfterServerOverwrite(\n              writesCache,\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree: ImmutableTree<Node>;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === null;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\nexport function resetSyncTreeTag() {\n  syncTreeNextQueryTag_ = 1;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\n *  deduping needs to take place. This flag allows toggling of that behavior\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error,\n  skipListenerDedup = false\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n\n    if (!skipListenerDedup) {\n      /**\n       * We may have just removed one of many listeners and can short-circuit this whole process\n       * We may also not have removed a default listener, in which case all of the descendant listeners should already be\n       * properly set up.\n       */\n\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(query => {\n          return query._queryParams.loadsAllData();\n        });\n      const covered = syncTree.syncPointTree_.findOnPath(\n        path,\n        (relativePath, parentSyncPoint) =>\n          syncPointHasCompleteView(parentSyncPoint)\n      );\n\n      if (removingDefault && !covered) {\n        const subtree = syncTree.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.query;\n            const listener = syncTreeCreateListenerForView_(syncTree, view);\n            syncTree.listenProvider_.startListening(\n              syncTreeQueryForListening_(newQuery),\n              syncTreeTagForQuery(syncTree, newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        }\n        // Otherwise there's nothing below us, so nothing we need to start listening on\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: QueryContext) => {\n            const tagToRemove = syncTree.queryToTagMap.get(\n              syncTreeMakeQueryKey_(queryToRemove)\n            );\n            syncTree.listenProvider_.stopListening(\n              syncTreeQueryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  skipSetupListener = false\n): Event[] {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nexport function syncTreeTagForQuery(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey: string): {\n  queryId: string;\n  path: Path;\n} {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\n/**\n * @internal\n */\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\n/**\n * @internal\n */\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { ValueEventRegistration } from '../api/Reference_impl';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration,\n  syncTreeTagForQuery\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will wait until the\n *  repo has established a connection and then request the value for `query`.\n * If the client is not able to retrieve the query result for another reason,\n * it reports an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: ValueEventRegistration\n): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload).withIndex(\n        query._queryParams.getIndex()\n      );\n      /**\n       * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\n       * Add an event registration,\n       * Update data at the path,\n       * Raise any events,\n       * Cleanup the SyncTree\n       */\n      syncTreeAddEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        true\n      );\n      let events: Event[];\n      if (query._queryParams.loadsAllData()) {\n        events = syncTreeApplyServerOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node\n        );\n      } else {\n        const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\n        events = syncTreeApplyTaggedQueryOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node,\n          tag\n        );\n      }\n      /*\n       * We need to raise events in the scenario where `get()` is called at a parent path, and\n       * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\n       * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\n       * and its corresponding serverCache, including the child location where `onValue` is called. Then,\n       * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\n       * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\n       * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\n       * ensure the corresponding child events will get fired.\n       */\n      eventQueueRaiseEventsForChangedPath(\n        repo.eventQueue_,\n        query._path,\n        events\n      );\n      syncTreeRemoveEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        null,\n        true\n      );\n      return node;\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      webSocketOnly,\n      nodeAdmin,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (dataURL: string): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathChild,\n  pathParent,\n  pathToUrlEncodedString,\n  pathIsEmpty\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `DataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: DataSnapshot) => boolean | void): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  const callbackContext = new CallbackContext(() => {});\n  const container = new ValueEventRegistration(callbackContext);\n  return repoGetValue(query._repo, query, container).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\n * the respective `on*` callbacks.\n *\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type: 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type: 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value less than or equal\n * to the specified value and a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type: 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type: 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type: 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type: 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type: 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type: 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type: 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type: 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type: 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  getModularInstance,\n  createMockUserToken,\n  EmulatorMockTokenOptions,\n  getDefaultEmulatorHostnameAndPort\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport {\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport {\n  warn,\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport { validateUrl } from '../core/util/validation';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { TransportManager } from '../realtime/TransportManager';\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\n\nimport { ReferenceImpl } from './Reference_impl';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  host: string,\n  port: number,\n  tokenProvider?: AuthTokenProvider\n): void {\n  repo.repoInfo_ = new RepoInfo(\n    `${host}:${port}`,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams\n  );\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined' && process.env) {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app.name, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService {\n  /** Represents a `Database` instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) {}\n\n  get _repo(): Repo {\n    if (!this._instanceStarted) {\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n\n  get _root(): ReferenceImpl {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n\n  _delete(): Promise<void> {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName: string) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n\nfunction checkTransportInit() {\n  if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n    warn(\n      'Transport has already been initialized. Please call this function before calling ref or setting up a listener'\n    );\n  }\n}\n\n/**\n * Force the use of websockets instead of longPolling.\n */\nexport function forceWebSockets() {\n  checkTransportInit();\n  BrowserPollConnection.forceDisallow();\n}\n\n/**\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\n */\nexport function forceLongPolling() {\n  checkTransportInit();\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\n * with default settings if no instance exists or if the existing instance uses\n * a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database {\n  const db = _getProvider(app, 'database').getImmediate({\n    identifier: url\n  }) as Database;\n  const emulator = getDefaultEmulatorHostnameAndPort('database');\n  if (emulator) {\n    connectDatabaseEmulator(db, ...emulator);\n  }\n  return db;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal(\n      'Cannot call useEmulator() after instance has already been initialized.'\n    );\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token =\n      typeof options.mockUserToken === 'string'\n        ? options.mockUserToken\n        : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void {\n  enableLoggingImpl(logger, persistent);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Connection } from '../realtime/Connection';\n\nimport { repoManagerForceRestClient } from './Database';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @internal\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from '../package.json';\nimport { setSDKVersion } from '../src/core/version';\n\nimport { repoManagerDatabaseFromApp } from './api/Database';\n\nexport function registerDatabase(variant?: string): void {\n  setSDKVersion(SDK_VERSION);\n  _registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(\n          app,\n          authProvider,\n          appCheckProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n"],"names":["SDK_VERSION","DOMStorageWrapper","domStorage_","key","value","this","removeItem","prefixedName_","setItem","stringify","storedVal","getItem","jsonEval","name","prefix_","toString","MemoryStorage","cache_","contains","createStoragefor","domStorageName","window","domStorage","e","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","id","sha1","str","utf8Bytes","stringToByteArray","Sha1","update","sha1Bytes","digest","base64","encodeByteArray","buildLogMessage_","message","i","length","arg","Array","isArray","apply","logger","firstLog_","enableLogging","logger_","persistent","assert","logLevel","LogLevel","VERBOSE","log","bind","set","remove","get","varArgs","logWrapper","prefix","error","fatal","Error","warn","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","fn","hasOwnProperty","doubleToIEEE754String","v","s","f","ln","bias","Infinity","Math","abs","pow","min","floor","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","INTEGER_REGEXP_","RegExp","test","intVal","exceptionGuard","setTimeout","stack","setTimeoutNonBlocking","time","timeout","Deno","unrefTimer","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getImmediate","optional","then","forceRefresh","getToken","Promise","resolve","reject","listener","addTokenListener","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","onInit","auth","catch","code","addAuthTokenListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","PROTOCOL_VERSION","FORGE_DOMAIN_RE","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","indexOf","internalHost","newHost","isCacheableHost","toURLString","protocol","query","repoInfoConnectionURL","repoInfo","type","params","connURL","isCustomHost","repoInfoNeedsQueryParam","pairs","StatsCollection","amount","counters_","deepCopy","collections","reporters","statsManagerGetCollection","hashString","PacketReceiver","onMessage_","responseNum","callback","closeAfterResponse","onClose","currentResponseNum","requestNum","pendingResponses","toProcess","FIREBASE_LONGPOLL_START_PARAM","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","log_","stats_","urlFn","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","isNodeSdk","document","readyState","called","wrappedFn","body","addEventListener","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","incrementIncomingBytes_","clearTimeout","everConnected_","password","sendNewPolls","closeAfter","pN","handleResponse","urlParams","random","uniqueCallbackIdentifier","location","hostname","connectURL","addTag","startLongPoll","addDisconnectPingFrame","close","myDisconnFrame","removeChild","shutdown_","dataStr","bytesSent","incrementCounter","base64data","base64Encode","MAX_URL_DATA_SIZE","enqueueSegment","pw","createElement","src","style","display","appendChild","bytesReceived","forceAllow_","forceDisallow_","href","Windows","UI","commandCB","onMessageCB","outstandingRequests","Set","currentSerial","myIFrame","createIFrame_","script","domain","iframeContents","doc","open","write","alive","innerHTML","myID","myPW","newRequest_","size","pendingSegs","theURL","curDataString","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","add","doNewRequest","delete","keepaliveTimeout","loadCB","doNodeLongPoll","newScript","async","onload","onreadystatechange","rstate","parentNode","onerror","iframe","contentWindow","contentDocument","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","connectionURL_","options","device","headers","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","frames","totalFrames","fullMess","jsonMess","frameCount","isNaN","handleNewFrameCount_","mess","resetKeepAlive","appendFrame_","remainingData","extractFrameCount_","sendString_","String","keepaliveTimer","clearInterval","setInterval","send","isOldAndroid","navigator","userAgent","oldAndroidMatch","match","parseFloat","isInMemoryStorage","TransportManager","initTransports_","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","ALL_TRANSPORTS","transport","globalTransportInitialized_","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","state_","transportManager_","start_","conn","initialTransport","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","markConnectionHealthy","connectionCount","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","dataMsg","msg","t","sendData_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","onSecondaryControl_","pendingDataMessages","proceedWithUpgrade_","start","tryCleanupConnection","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","version","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","upgradeTransport","startUpgrade_","closeConnections_","reason","ServerActions","pathString","onComplete","hash","token","stats","EventEmitter","allowedEvents_","eventType","listeners_","listeners","context","validateEventType_","eventData","getInitialEvent","splice","find","et","OnlineMonitor","online_","isMobileCordova","trigger","MAX_PATH_DEPTH","MAX_PATH_LENGTH_BYTES","Path","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathSlice","begin","slice","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathEquals","other","j","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","stringLength","validationPathCheckValid","validationPath","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","Map","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","getInstance","on","onVisible_","onOnline_","action","onResponse","curReqNum","r","sendRequest","initConnection_","deferred","Deferred","outstandingGet","request","p","_path","q","_queryObject","index","sendGet_","promise","currentHashFn","tag","queryId","_queryIdentifier","has","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","removeListen_","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isAdmin","tryAppCheck","authMethod","isValidFormat","requestData","cred","res","onAuthRevoked_","onAppCheckRevoked_","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","undefined","sendPut_","queued","result","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","Date","getTime","handleTimestamp_","sendConnectStats_","restoreState_","establishConnection_","scheduleConnect_","online","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","onRealtimeDisconnect_","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","all","interrupt","isEmpty","delta","serverTimeOffset","put","map","listen","normalizedPathString","statusCode","explanation","notifyForInvalidToken","console","replace","values","queries","clientName","isReactNative","reportStats","currentlyOnline","warnings","safeGet","indexSpec","getIndex","indexPath","__EMPTY_NODE","NamedNode","node","Index","compare","oldNode","newNode","oldWrapped","newWrapped","MIN","KeyIndex","assertionError","indexValue","val","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","cmp","left","right","nodeStack_","pop","LLRBNode","color","RED","SortedMap","EMPTY_NODE","count","inorderTraversal","reverseTraversal","min_","maxKey","n","copy","insert","fixUp_","isRed_","moveRedLeft_","removeMin_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","blackDepth","check_","MAX_NODE","LLRBEmptyNode","comparator_","root_","BLACK","rightParent","minKey","resultGenerator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","__childrenNodeConstructor","nodeFromJSON","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","LeafNode","value_","priorityNode_","newPriorityNode","childName","childNode","newChildNode","updatePriority","updateImmediateChild","front","updateChild","exportFormat","getValue","lazyHash_","toHash","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","equals","_defaultIndexMap","PriorityIndex","aPriority","bPriority","indexCmp","compareTo","PRIORITY_INDEX","LOG_2","Base12Num","num","current_","mask","bits_","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","nextBitIsOne","buildFrom12Array","fallbackObject","IndexMap","indexes_","indexSet_","indexKey","sortedMap","indexDefinition","existingChildren","newIndex","sawIndexedValue","iter","getIterator","Wrap","next","getNext","isDefinedOn","getCompare","indexName","newIndexSet","Object","newIndexes","indexedChildren","existingSnap","newChildren","ChildrenNode","children_","indexMap_","child","getImmediateChild","getChild","newIndexMap","removeFromIndexes","addToIndexes","newPriority","newImmediateChild","numKeys","allIntegerKeys","forEachChild","array","childHash","idx","resolveIndex_","predecessor","getPredecessorKey","getFirstChildName","getLastChildName","wrappedNode","getIteratorFrom","minPost","startPost","iterator","peek","getReverseIteratorFrom","maxPost","endPost","hasIndex","addIndex","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","Default","defineProperties","MAX","setPriorityMaxNode","USE_HINZE","json","childData","children","childrenHavePriority","childSet","sortedChildSet","setNodeFromJSON","PathIndex","indexPath_","snap","aChild","extractChild","bChild","valueNode","ValueIndex","VALUE_INDEX","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","QueryParams","startAfterSet_","endBeforeSet_","startSet_","viewFrom_","indexStartValue_","startNameSet_","indexStartName_","endSet_","indexEndValue_","endNameSet_","indexEndName_","limitSet_","limit_","index_","queryParamsToRestQueryStringParameters","queryParams","orderBy","qs","startParam","endParam","isViewFromLeft","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","listenId","getListenId_","thisListen","queryStringParameters","restRequest_","querystring","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","childKey","sparseSnapshotTreeForEachTree","prefixPath","func","forEach","tree","sparseSnapshotTreeForEachChild","OperationType","StatsListener","collection_","newStats","last_","stat","StatsReporter","collection","server_","statsListener_","reportStats_","reportedStats","haveStatsToReport","statsToReport_","newOperationSourceServerTaggedQuery","fromUser","fromServer","tagged","emptyChildrenSingleton","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","subtree","Overwrite","source","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isCompleteForChild","hasChild","eventGeneratorGenerateEventsForType","eventGenerator","events","changes","registrations","eventCache","filteredChanges","filter","change","aWrapped","bWrapped","eventGeneratorCompareChanges","materializedChange","prevName","getPredecessorChildName","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","query_","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","filtered","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","getNode","viewCacheGetCompleteServerSnap","ImmutableTree","relativePath","predicate","childExistingPathAndValue","findRootMostMatchingPathAndValue","toSet","newChild","newTree","setTree","fold_","pathSoFar","accum","findOnPath_","pathToFollow","nextChild","foreachOnPath_","currentRelativePath","foreach_","childPath","childSnap","CompoundWrite","writeTree_","compoundWriteAddWrite","compoundWrite","rootmost","findRootMostValueAndPath","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","empty","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeRemoveWrite","writeId","allWrites","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","visibleWrites","writeTreeLayerTree_","writeTreeDefaultFilter_","lastWriteId","writeTreeResetTree_","writeRecord","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","merge","subMerge","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeShadowingWrite","writeTreeRefCalcIndexedSlice","completeServerData","toIterate","withIndex","nodes","writeTreeCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeCalcCompleteChild","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","from","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","viewProcessorApplyOperation","viewProcessor","oldViewCache","operation","writesCache","completeCache","filterServerNode","accumulator","overwrite","viewProcessorApplyUserOverwrite","isFiltered","viewProcessorApplyServerOverwrite","changedChildren","curViewCache","foreach","viewProcessorCacheHasChild","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","newEventCache","oldEventCache","serverChildren","updateFullNode","filtersNodes","viewProcessorRevertUserWrite","ackPath","isCompleteForPath","mergePath","serverCachePath","viewProcessorAckUserWrite","LISTEN_COMPLETE","oldServerNode","viewProcessorGenerateEventCacheAfterServerEvent","viewProcessorListenComplete","getChanges","isLeafOrEmpty","oldCompleteSnap","viewProcessorMaybeAddValueEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","newEventChild","childChangePath","eventChildUpdate","changedSnap","newServerCache","oldServerSnap","serverFilter","getIndexedFilter","newServerNode","oldChild","getCompleteChild","viewProcessorApplyMerge","viewMergeTree","childMergeTree","isUnknownDeepMerge","referenceConstructor","viewGetCompleteServerCache","view","cache","viewApplyOperation","processor_","isIndexed","viewGenerateEventsForChanges_","eventRegistration","eventRegistrations_","eventRegistrations","moves","indexedValueChanged","eventGeneratorGenerateEventsForChanges","eventGenerator_","syncPointApplyOperation","syncPoint","optCompleteServerCache","views","concat","syncPointGetCompleteServerCache","SyncTree","listenProvider_","syncPointTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","writeTreeAddOverwrite","pendingWriteTree_","syncTreeApplyOperationToSyncPoints_","syncTreeAckUserWrite","record","writeTreeGetWrite","syncTreeApplyServerOverwrite","syncTreeApplyTaggedQueryOverwrite","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","syncTreeApplyTaggedOperation_","syncTreeCalcCompleteEventCache","findOnPath","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","operationForChild","childServerCache","childWritesCache","splitIndex","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","generateWithValues","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","op","existing","unused","existingNode","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeGetPath","childEmpty","treeIsEmpty","childExists","treeUpdateChild","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","validateFirebaseDataArg","fnName","validateFirebaseData","errorPrefixFxn","errorPrefix","hasDotValue","hasActualChild","last","validationPathPop","validatePathString","argumentName","validateRootPathString","validateWritablePath","validateUrl","parsedUrl","isValidRootPathString","EventQueue","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventLists_","eventQueueRaiseEventsForChangedPath","changedPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","recursionDepth_","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","MAX_TRANSACTION_RETRIES","Repo","forceRestClient_","appCheckProvider_","eventQueue_","transactionQueueTree_","repoStart","repo","appId","authOverride","search","isMerge","repoOnDataUpdate","repoOnConnectStatus","persistentConnection_","connectStatus","repoUpdateInfo","repoOnServerInfoUpdate","addTokenChangeListener","refreshAuthToken","refreshAppCheckToken","statsReporter_","creatorFunction","statsManagerGetOrCreateReporter","infoData_","infoSyncTree_","startListening","infoEvents","stopListening","serverSyncTree_","unlisten","repoServerTime","offset","repoGenerateServerValues","dataUpdateCount","interceptServerDataCallback_","taggedChildren","raw","changeTree","fromObject","syncTreeApplyTaggedQueryMerge","taggedSnap","syncTreeApplyServerMerge","affectedPath","repoRerunTransactions","repoLog","resolvedOnDisconnectTree","resolved","repoAbortTransactions","repoRunOnDisconnectEvents","updateSnapshot","repoGetNextWriteId","nextWriteId_","repoSetWithPriority","newVal","newNodeUnresolved","success","clearEvents","repoCallOnCompleteCallback","repoInterrupt","toUpperCase","repoGetLatestState","excludeSets","repoSendReadyTransactions","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","every","transaction","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","callbacks","currentOutputSnapshotResolved","unwatcher","abortReason","repoSendTransactionQueue","rootMostTransactionNode","repoGetAncestorTransactionNode","abortTransaction","currentNode","currentInputSnapshot","newDataNode","oldWriteId","newNodeResolved","applyLocally","repoRerunTransactionQueue","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","order","nodeQueue","to","treeForEachAncestor","repoAbortTransactionsOnNode","lastSent","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","decodePath","queryString","results","charAt","segment","kv","decodeQuery","hostWithoutPort","dotInd","PUSH_CHARS","nextPushId","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","QueryImpl","_repo","_orderByCalled","ReferenceImpl","getModularInstance","sameRepo","samePath","sameQueryIdentifier","encodeURIComponent","pathToUrlEncodedString","parentPath","ref","db","_checkNotDeleted","_root","thennablePushRef","pushRef","wrapCallback","syncPointSetReferenceConstructor","syncTreeSetReferenceConstructor","FIREBASE_DATABASE_EMULATOR_HOST_VAR","repos","useRestClient","repoManagerDatabaseFromApp","app","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","OWNER","appRepos","repoManagerCreateRepo","Database","_repoInternal","_instanceStarted","_rootInternal","appName","repoManagerDeleteRepo","apiName","getDatabase","getApp","_getProvider","identifier","emulator","getDefaultEmulatorHostnameAndPort","connectDatabaseEmulator","tokenProvider","mockUserToken","createMockUserToken","repoManagerApplyEmulatorSettings","prototype","simpleListen","echo","onEcho","variant","setSDKVersion","_registerComponent","Component","container","instanceIdentifier","getProvider","setMultipleInstances","registerVersion"],"sourceRoot":""}